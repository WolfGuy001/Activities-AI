import json
import os
import random
import telebot
from telebot import types

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot("7475097618:AAGzzSlfRelwn4C5qr2y6zHtefVZOzBRMPo")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
USERS_FILE = "users.json"

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
CITIES = ["–°—É—Ä–≥—É—Ç", "–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫", "–ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫", "–ù–µ—Ñ—Ç–µ—é–≥–∞–Ω—Å–∫", "–ö–æ–≥–∞–ª—ã–º", "–ù—è–≥–∞–Ω—å"]


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return {}
    return {}


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_users(users):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=4)


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ 4-–∑–Ω–∞—á–Ω–æ–≥–æ ID
def generate_unique_id(users):
    while True:
        user_id = random.randint(1000, 9999)  # –°–ª—É—á–∞–π–Ω—ã–π ID –æ—Ç 1000 –¥–æ 9999
        if not any(user.get("user_id") == user_id for user in users.values()):
            return user_id

def show_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è")
    markup.add("–ü–æ–∏—Å–∫ –º–µ—Å—Ç *AI*")
    markup.add("–†–µ–π—Ç–∏–Ω–≥")
    markup.add("–ü—Ä–æ—Ñ–∏–ª—å")
    bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    users = load_users()
    chat_id = str(message.chat.id)

    if chat_id in users:
        bot.send_message(message.chat.id, "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!")
        show_main_menu(message.chat.id)
    else:
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è:")
        bot.register_next_step_handler(message, process_name_step)


# –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: —à–∞–≥ –∏–º–µ–Ω–∏
def process_name_step(message):
    chat_id = str(message.chat.id)
    users = load_users()

    user_data = {
        "name": message.text,
        "chat_id": chat_id
    }
    users[chat_id] = user_data
    save_users(users)

    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:")
    bot.register_next_step_handler(message, process_nickname_step)


# –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: —à–∞–≥ –Ω–∏–∫–Ω–µ–π–º–∞
def process_nickname_step(message):
    chat_id = str(message.chat.id)
    users = load_users()

    users[chat_id]["nickname"] = message.text
    save_users(users)

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    bot.register_next_step_handler(message, process_age_step)


# –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: —à–∞–≥ –≤–æ–∑—Ä–∞—Å—Ç–∞
def process_age_step(message):
    chat_id = str(message.chat.id)
    users = load_users()

    try:
        age = int(message.text)
        if age <= 0 or age > 120:
            raise ValueError
        users[chat_id]["age"] = age
        save_users(users)

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add("–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=markup)
        bot.register_next_step_handler(message, process_gender_step)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 120):")
        bot.register_next_step_handler(message, process_age_step)


# –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: —à–∞–≥ –ø–æ–ª–∞
def process_gender_step(message):
    chat_id = str(message.chat.id)
    users = load_users()

    if message.text not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add("–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π")
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=markup)
        bot.register_next_step_handler(message, process_gender_step)
        return

    users[chat_id]["gender"] = message.text
    save_users(users)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ä–æ–¥–∞–º–∏
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for city in CITIES:
        markup.add(city)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, process_city_step)


# –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: —à–∞–≥ –≥–æ—Ä–æ–¥–∞
def process_city_step(message):
    chat_id = str(message.chat.id)
    users = load_users()

    if message.text not in CITIES:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        for city in CITIES:
            markup.add(city)
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=markup)
        bot.register_next_step_handler(message, process_city_step)
        return

    users[chat_id]["city"] = message.text
    users[chat_id]["user_id"] = generate_unique_id(users)
    users[chat_id]["rating"] = 0  # –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
    save_users(users)

    bot.send_message(message.chat.id, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=types.ReplyKeyboardRemove())
    show_profile(message, users[chat_id])
    show_main_menu(message.chat.id)


# –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–ø–µ—Ä—å —Å ID)
def show_profile(message, user_data):
    profile_text = (
        f"üèÜ –†–µ–π—Ç–∏–Ω–≥: {user_data.get('rating', 0)}\n"
        f"üÜî ID: {user_data.get('user_id', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üë§ –ò–º—è: {user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üîπ –ù–∏–∫: {user_data.get('nickname', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {user_data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üöª –ü–æ–ª: {user_data.get('gender', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {user_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
    )
    bot.send_message(message.chat.id, profile_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete
@bot.message_handler(commands=['delete'])
def handle_text(message):
    users = load_users()
    chat_id = str(message.chat.id)

    if chat_id not in users:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return

    if message.text == "–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è":
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª —Å —Å–æ–±—ã—Ç–∏—è–º–∏: https://t.me/your_channel")

    elif message.text == "–ü–æ–∏—Å–∫ –º–µ—Å—Ç *AI*":
        bot.send_message(message.chat.id, "–ß–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–Ω—è—Ç—å—Å—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–∞—Ñ–µ, –∫–∏–Ω–æ, —Å–ø–æ—Ä—Ç)")
        bot.register_next_step_handler(message, process_ai_search)

    elif message.text == "–†–µ–π—Ç–∏–Ω–≥":
        show_local_rating(message)

    elif message.text == "–ü—Ä–æ—Ñ–∏–ª—å":
        show_profile(message, users[chat_id])


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç —á–µ—Ä–µ–∑ AI
def process_ai_search(message):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    user_activity = message.text
    bot.send_message(message.chat.id,
                     f"–ò—â–µ–º –º–µ—Å—Ç–∞ –¥–ª—è: {user_activity}\n(–≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è, —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–∑–∂–µ)")
    show_main_menu(message.chat.id)


# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
def show_local_rating(message):
    users = load_users()
    chat_id = str(message.chat.id)

    if chat_id not in users:
        return

    user_city = users[chat_id]["city"]
    local_users = [u for u in users.values() if u.get("city") == user_city]

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    sorted_users = sorted(local_users, key=lambda x: x.get("rating", 0), reverse=True)

    if not sorted_users:
        bot.send_message(message.chat.id, "–í –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return

    rating_text = f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ {user_city}:\n\n"
    for idx, user in enumerate(sorted_users, 1):
        rating_text += f"{idx}. {user.get('nickname', '–ë–µ–∑ –Ω–∏–∫–∞')} - {user.get('rating', 0)} –æ—á–∫–æ–≤\n"

    bot.send_message(message.chat.id, rating_text)

def delete_profile(message):
    chat_id = str(message.chat.id)
    users = load_users()

    if chat_id not in users:
        bot.send_message(message.chat.id, "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
                     reply_markup=markup)
    bot.register_next_step_handler(message, confirm_delete)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
def confirm_delete(message):
    chat_id = str(message.chat.id)
    users = load_users()

    if message.text.lower() == "–¥–∞":
        del users[chat_id]
        save_users(users)
        bot.send_message(message.chat.id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", reply_markup=types.ReplyKeyboardRemove())
    else:
        bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()