import telebot
import random
from telebot import types
import time
import requests
import json

# –ó–∞–º–µ–Ω–∏ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = '7475097618:AAGzzSlfRelwn4C5qr2y6zHtefVZOzBRMPo'
bot = telebot.TeleBot(BOT_TOKEN)

url = "https://api.intelligence.io.solutions/api/v1/chat/completions"
headers = {
    "Content-Type": "application/json",
    "Authorization": "Bearer io-v2-eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvd25lciI6IjQ5NDVlZmJjLTFkMzYtNGI2MC1hMTc5LTFiZDczYmNhMmU3ZCIsImV4cCI6NDg5OTA3MzAzNX0.C2HYOd4JxMVHKzRi0_Lyy3pNkW0V8yXqq5s5tdAe86Lml6Z6QZkOQXT-n6Qpn5Ul8F1rfAYkou2Q2Va-JzjvAQ",
}

users_file = 'users.json'
user_states = {}
search_queries = {}
events_channel_link = '–°–°–´–õ–ö–ê_–ù–ê_–í–ê–®_–¢–ï–õ–ï–ì–†–ê–ú_–ö–ê–ù–ê–õ' # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
workout_program_requests = {}

def load_users():
    try:
        with open(users_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_users(users):
    with open(users_file, 'w', encoding='utf-8') as f:
        json.dump(users, f, ensure_ascii=False, indent=4)

def generate_unique_id(users):
    while True:
        user_id = random.randint(100, 999)
        if str(user_id) not in users:
            return user_id

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    users = load_users()
    if str(chat_id) in users:
        bot.send_message(chat_id, "üòä –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row('üèãÔ∏è –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫')
        markup.row('üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è', 'üó∫Ô∏è –ü–æ–∏—Å–∫ –º–µ—Å—Ç')
        markup.row('üèÜ –†–µ–π—Ç–∏–Ω–≥', 'üë§ –ü—Ä–æ—Ñ–∏–ª—å')
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    else:
        bot.send_message(chat_id,"üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç - —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∫–æ–º–ø–∞–Ω—å–æ–Ω –≤ —Å–ø–æ—Ä—Ç–µ –∏ –≤–µ–¥–µ–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏\n"
                                " \n"
                                "–° –Ω–∞–º–∏ —Ç—ã —Å–º–æ–∂–µ—à—å:\n"
                                "- –ë—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π\n"
                                "- –í—ã–±—Ä–∞—Ç—å –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ–∫—Ü–∏—é\n"
                                "- –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
                                "- –û—Ü–µ–Ω–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
                                "- –°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...\n"
                                "–ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!)\n"
                                " \n"
                                "–ù–æ —Å–Ω–∞—á–∞–ª–∞, –¥–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º –ø—Ä–æ—Å—Ç—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        user_states[chat_id] = {'state': 'waiting_for_real_name'}
        time.sleep(5)
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è:\n"
                          "_–ï–≥–æ –Ω–µ —É–≤–∏–¥–∏—Ç –Ω–∏–∫—Ç–æ –∫—Ä–æ–º–µ —Ç–µ–±—è_", parse_mode="Markdown")

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get('state') == 'waiting_for_real_name')
def get_real_name(message):
    chat_id = message.chat.id
    user_states[chat_id]['real_name'] = message.text
    user_states[chat_id]['state'] = 'waiting_for_nickname'
    bot.send_message(chat_id, "üìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º:\n"
                              "_–ï–≥–æ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –≤ —Ç–æ–ø–µ_", parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == 'üèãÔ∏è –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫')
def ask_for_workout_details(message):
    chat_id = message.chat.id
    workout_program_requests[chat_id] = {'state': 'waiting_for_details'}
    bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Ü–µ–ª—å, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏ –ø—Ä–æ—á–µ–µ, –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ):")

@bot.message_handler(func=lambda message: workout_program_requests.get(message.chat.id, {}).get('state') == 'waiting_for_details')
def get_workout_details(message):
    chat_id = message.chat.id
    details = message.text
    workout_program_requests[chat_id]['details'] = details

    bot.send_message(chat_id, f"‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!\n"
                              f"–ù—É–∂–Ω–æ –Ω–µ–º–Ω–æ–∂–∫–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å üòâ")

    print(workout_program_requests)

    data = {
        "model": "microsoft/Phi-3.5-mini-instruct",
        "messages": [
            {
                "role": "system",
                "content": "–¢—ã –ø—Ä–æ—Ñ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ª–∏—á–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä"
            },
            {
                "role": "user",
                "content": f'–ü—Ä–∏–¥—É–º–∞–π –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É:{workout_program_requests}. –ù–µ —Ä–∞—Å–ø–∏—Å—ã–≤–∞–π –≤—Å–µ —Å–ª–∏—à–∫–æ–º –ø–æ–¥—Ä–æ–±–Ω–æ, –ø—Ä–æ—Å—Ç–æ –∫–æ—Ä–æ—Ç–∫–æ –Ω–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.'
            }
        ],
    }

    response = requests.post(url, headers=headers, json=data)
    data = response.json()

    text = data['choices'][0]['message']['content']
    print(text)
    bot.send_message(chat_id, text, parse_mode="Markdown")
    bot.send_message(chat_id, '–í–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∞!\n'
                              '–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ –∑–∞–º–µ—Ç–∫–∞—Ö —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å', parse_mode="Markdown")

    del workout_program_requests[chat_id]  # –û—á–∏—â–∞–µ–º –∑–∞–ø—Ä–æ—Å

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get('state') == 'waiting_for_nickname')
def get_nickname(message):
    chat_id = message.chat.id
    user_states[chat_id]['nickname'] = message.text
    user_states[chat_id]['state'] = 'waiting_for_age'
    bot.send_message(chat_id, "üî¢ –ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–æ–∑—Ä–∞—Å—Ç?:\n"
                              "_–ù—É–∂–Ω–æ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Å–µ–∫—Ü–∏–π_", parse_mode="Markdown")

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get('state') == 'waiting_for_age' and message.text.isdigit())
def get_age(message):
    chat_id = message.chat.id
    user_states[chat_id]['age'] = int(message.text)
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add('–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π', '–ù–µ—Ç–∞–∫—É—Å—è')
    user_states[chat_id]['state'] = 'waiting_for_gender'
    bot.send_message(chat_id, "üßç –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=markup)

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get('state') == 'waiting_for_age' and not message.text.isdigit())
def invalid_age(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.")

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get('state') == 'waiting_for_gender' and message.text in ['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π', '–ù–µ—Ç–∞–∫—É—Å—è'])
def get_gender(message):
    chat_id = message.chat.id
    user_states[chat_id]['gender'] = message.text
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add('–°—É—Ä–≥—É—Ç', '–•–∞–Ω—Ç—ã-–º–∞–Ω—Å–∏–π—Å–∫', '–ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫', '–ù–µ—Ñ—Ç–µ—é–≥–∞–Ω—Å–∫', '–ö–æ–≥–∞–ª—ã–º', '–ù—è–≥–∞–Ω—å')
    user_states[chat_id]['state'] = 'waiting_for_city'
    bot.send_message(chat_id, "üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:", reply_markup=markup)

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get('state') == 'waiting_for_gender' and message.text not in ['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π'])
def invalid_gender(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get('state') == 'waiting_for_city' and message.text in ['–°—É—Ä–≥—É—Ç', '–•–∞–Ω—Ç—ã-–º–∞–Ω—Å–∏–π—Å–∫', '–ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫', '–ù–µ—Ñ—Ç–µ—é–≥–∞–Ω—Å–∫', '–ö–æ–≥–∞–ª—ã–º', '–ù—è–≥–∞–Ω—å'])
def get_city(message):
    chat_id = message.chat.id
    user_states[chat_id]['city'] = message.text
    users = load_users()
    user_id = generate_unique_id(users)
    users[str(chat_id)] = {
        'id': user_id,
        'real_name': user_states[chat_id]['real_name'],
        'nickname': user_states[chat_id]['nickname'],
        'age': user_states[chat_id]['age'],
        'gender': user_states[chat_id]['gender'],
        'city': user_states[chat_id]['city'],
        'rating': 0
    }
    save_users(users)
    del user_states[chat_id]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è', 'üó∫Ô∏è –ü–æ–∏—Å–∫ –º–µ—Å—Ç')
    markup.row('üèÜ –†–µ–π—Ç–∏–Ω–≥', 'üë§ –ü—Ä–æ—Ñ–∏–ª—å')
    bot.send_message(chat_id, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞!", reply_markup=markup)

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get('state') == 'waiting_for_city' and message.text not in ['–°—É—Ä–≥—É—Ç', '–•–∞–Ω—Ç—ã-–º–∞–Ω—Å–∏–π—Å–∫', '–ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫', '–ù–µ—Ñ—Ç–µ—é–≥–∞–Ω—Å–∫', '–ö–æ–≥–∞–ª—ã–º', '–ù—è–≥–∞–Ω—å'])
def invalid_city(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")

@bot.message_handler(func=lambda message: message.text == 'üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è')
def send_events_link(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, f"üì¢ –ö–∞–Ω–∞–ª —Å —Å–æ–±—ã—Ç–∏—è–º–∏: "
                              f"\n{events_channel_link}")

@bot.message_handler(func=lambda message: message.text == 'üó∫Ô∏è –ü–æ–∏—Å–∫ –º–µ—Å—Ç')
def ask_for_search_query(message):
    chat_id = message.chat.id
    search_queries[chat_id] = {'state': 'waiting_for_query'}
    bot.send_message(chat_id, "ü§î –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏, –∫–∞–∫–æ–µ –º–µ—Å—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏(–Ω–∞–ø—Ä–∏–º–µ—Ä —Å–ø–æ—Ä—Ç–∑–∞–ª –∏–ª–∏ —Å–µ–∫—Ü–∏—è –ø–æ –±–æ–∫—Å—É)?\n"
                              "\n"
                              "–ú—ã —Å–æ—Å—Ç–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—Ç –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –≤–∞–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ")

@bot.message_handler(func=lambda message: search_queries.get(message.chat.id, {}).get('state') == 'waiting_for_query')
def get_search_query(message):
    chat_id = message.chat.id
    query = message.text
    search_queries[chat_id]['query'] = query
    del search_queries[chat_id]
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç,
    # –Ω–æ –≤ –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –º—ã –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å.
    bot.send_message(chat_id, f"‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!\n"
                              f"–ù—É–∂–Ω–æ –Ω–µ–º–Ω–æ–∂–∫–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å üòâ")
    with open('organizations.json', 'r', encoding='utf-8') as file:
        data = json.load(file)

    print(data)

    data = {
        "model": "microsoft/Phi-3.5-mini-instruct",
        "messages": [
            {
                "role": "system",
                "content": "–¢—ã –ø—Ä–æ—Ñ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ª–∏—á–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä"
            },
            {
                "role": "user",
                "content": f'''–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –¢–û–õ–¨–ö–û –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–∞ {data} –ø–æ –∑–∞–ø—Ä–æ—Å—É: {search_queries}. 
            –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—Ç–∞:
            1. [–ù–∞–∑–≤–∞–Ω–∏–µ] - [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è, 2-3 —Å–ª–æ–≤–∞]
            ...
            –ù–µ –¥–æ–±–∞–≤–ª—è–π –∫–æ–Ω—Ç–∞–∫—Ç—ã, —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –∏–∑ —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è.'''
            }
        ]
    }

    response = requests.post(url, headers=headers, json=data)
    data = response.json()

    text = data['choices'][0]['message']['content']
    print(text)
    bot.send_message(chat_id, text, parse_mode="Markdown")

    del search_queries[chat_id]

@bot.message_handler(func=lambda message: message.text == 'üèÜ –†–µ–π—Ç–∏–Ω–≥')
def show_rating(message):
    chat_id = message.chat.id
    users = load_users()
    if not users:
        bot.send_message(chat_id, "üò• –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    sorted_users = sorted(users.items(), key=lambda item: item[1]['rating'], reverse=True)
    rating_text = ("üèÜ –¢–æ–ø-3:\n"
                   "\n")
    for i, (user_id, user_data) in enumerate(sorted_users):
        medal = ''
        if i == 0:
            medal = 'ü•á '
        elif i == 1:
            medal = 'ü•à '
        elif i == 2:
            medal = 'ü•â '
        rating_text += f"{medal}{user_data['nickname']} - –†–µ–π—Ç–∏–Ω–≥: {user_data['rating']}\n"
        if i == 2: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø 3 —Å –º–µ–¥–∞–ª—è–º–∏
            break
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –º–µ–¥–∞–ª–µ–π
    if len(sorted_users) > 3:
        rating_text += "\n\n–î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
        for i, (user_id, user_data) in enumerate(sorted_users[3:]):
            rating_text += f"{user_data['nickname']} - {user_data['rating']}\n"

    bot.send_message(chat_id, rating_text)

@bot.message_handler(func=lambda message: message.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å')
def show_profile(message):
    chat_id = message.chat.id
    users = load_users()
    if str(chat_id) in users:
        user_data = users[str(chat_id)]
        profile_text = (
            "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"üÜî ID: {user_data['id']}\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {user_data['rating']}\n"
            f"–ò–º—è: {user_data['real_name']}\n"
            f"–ù–∏–∫: {user_data['nickname']}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {user_data['age']}\n"
            f"üèôÔ∏è –ì–æ—Ä–æ–¥: {user_data['city']}"
        )
        markup = types.InlineKeyboardMarkup()
        delete_button = types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f'delete_profile_{chat_id}')
        markup.add(delete_button)
        bot.send_message(chat_id, profile_text, reply_markup=markup)
    else:
        bot.send_message(chat_id, "‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_profile_'))
def delete_profile(call):
    chat_id_to_delete = str(call.data.split('_')[-1])
    users = load_users()
    if chat_id_to_delete in users:
        del users[chat_id_to_delete]
        save_users(users)
        bot.send_message(call.message.chat.id, "üóëÔ∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
    bot.answer_callback_query(call.id)

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)